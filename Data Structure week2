package week2;

import java.util.Scanner;

public class week2 {

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		SingleLinkedList list = new SingleLinkedList();

		while(list.size()<8) // size가 8전까지 입력받는다
		{
			System.out.print("삽입 값 입력  : ");
			String text = input.next();
			if(text.equals("end"))
			{
				list.ListPrint();
				break;
			}
			list.add(text);
			
			
		}
		if(list.size()==8)  //size가 8이되면 start와 end를 입력받는다
		{
			System.out.println("start value  : ");
			String start = input.next(); // start는 string으로 받고 end일경우 출력만한다
			if(start.equals("end"))
			{
				list.ListPrint();
				
			}
			else
			{
				System.out.println("end value  : ");
				int end = input.nextInt(); 
				list.removeInterval(Integer.parseInt(start), end); //start를  int형으로 형변환하고 호출한다
			}
		}

	}

}






class SingleLinkedList {
	private static class Node<String> {
		private String item;
		private Node<String> next;

		private Node() {
			next = null;
		}

		private Node(String item) {
			this.item = item;
			next = null;
		}
	}

	private Node<String> head;
	private int size;

	public SingleLinkedList() {
		head = null;
		size = 0;
	}

	public void ListPrint() { // 출력  메소드
		String s = "";
		for (Node scan = head; scan != null; scan = scan.next) { // 헤드부터 값이 없을때까지  읽는다
			if (scan == head) {
				s = ""+scan.item;
			} else {
				s = s + " -> " + scan.item;
				
			}
		}
		System.out.println(s);
	}

	public void add(String item) { // 삽입 메소드
		Node<String> newnode = new Node<String>(item); // 입력값을 통해 새 노드를 만든다
		Node<String> curr = head; // curr 현재 위치를 head로 지정
		if (head == null) { // 만약에 head가 비어있으면 newnode를 head로 지정
			head = newnode;
		} 	
		else { //만약에 head가 있으면 다음값이 null이아닐때까지 리스트를 읽고 끝까지 간다음에 끝값 다음에 newnode를 넣어준다
			while (curr.next != null) { 
				curr = curr.next;
			}
			curr.next = newnode;
		}		
		
		ListPrint(); //출력 및 size ++ 
		size++;
	}

	public boolean remove(String item) { // 제거메소드

		Node<String> prev = null;
		Node<String> curr = head;
		while (curr != null) { // curr이 널이 아닐때 까지 입력값과 동일한값을 찾음
			if (curr.item.equals(item)) {
				break;
			} else {
				prev = curr;
				curr = curr.next;
			}
		}
		if (curr == null) // 끝까지 못찾앗을때는 안에동일한값이 없다는 거임
			return false;
		else if (prev == null) // 헤드가 제거값일때 
			head = head.next;
		else
			prev.next = curr.next;
		size--;
		return true;

	}

	public void removeInterval(int start, int end) { // 제거메소드

		for(int i=start;i<=end;i++) // end - start 의 숫자만큼 제거 진행 (2,4 면 2,3,4를 제거해야하므로 3번진행)
		{
			Node<String> prev = null; // 이전 노드
			Node<String> curr = head; // 현재 노드
			for (int j=1;j<start;j++) // 1부터 start 지점 전까지 node를 진행시킨다
			{	
				prev = curr;
				curr = curr.next;
			}	
			if(prev==null) // 만약에 1번노드를 제거하라고 하면 head를 head.next로 바꾼다
			{
				head = head.next;
			}
			else { // start지점 전까지 진행되었으면 이전노드의 다음 값을 현재 노드의 값으로 지정해준다  1 2 3 4 5 가 있고  2번 3번을 제거할경우
				//1이 prev 2번 curr일때 1번에 다음을 2가 아닌 2의 다음값인 3에 연결시킨다
			prev.next = curr.next;
			}
			size--;	 // size --
	
		}
		ListPrint();
	
	}

	public int size() { // size 반환
		return size;
	}

}

